// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ClientAction_ClientActionType int32

const (
	ClientAction_HIT   ClientAction_ClientActionType = 0
	ClientAction_STAND ClientAction_ClientActionType = 1
	ClientAction_LEAVE ClientAction_ClientActionType = 2
)

var ClientAction_ClientActionType_name = map[int32]string{
	0: "HIT",
	1: "STAND",
	2: "LEAVE",
}

var ClientAction_ClientActionType_value = map[string]int32{
	"HIT":   0,
	"STAND": 1,
	"LEAVE": 2,
}

func (x ClientAction_ClientActionType) String() string {
	return proto.EnumName(ClientAction_ClientActionType_name, int32(x))
}

func (ClientAction_ClientActionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{1, 0}
}

type ServerResponse_ServerResponseType int32

const (
	ServerResponse_MESSAGE     ServerResponse_ServerResponseType = 0
	ServerResponse_NEEDS_INPUT ServerResponse_ServerResponseType = 1
)

var ServerResponse_ServerResponseType_name = map[int32]string{
	0: "MESSAGE",
	1: "NEEDS_INPUT",
}

var ServerResponse_ServerResponseType_value = map[string]int32{
	"MESSAGE":     0,
	"NEEDS_INPUT": 1,
}

func (x ServerResponse_ServerResponseType) String() string {
	return proto.EnumName(ServerResponse_ServerResponseType_name, int32(x))
}

func (ServerResponse_ServerResponseType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{3, 0}
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type ClientAction struct {
	Type                 ClientAction_ClientActionType `protobuf:"varint,1,opt,name=type,proto3,enum=ClientAction_ClientActionType" json:"type,omitempty"`
	Username             string                        `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ClientAction) Reset()         { *m = ClientAction{} }
func (m *ClientAction) String() string { return proto.CompactTextString(m) }
func (*ClientAction) ProtoMessage()    {}
func (*ClientAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{1}
}

func (m *ClientAction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientAction.Unmarshal(m, b)
}
func (m *ClientAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientAction.Marshal(b, m, deterministic)
}
func (m *ClientAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientAction.Merge(m, src)
}
func (m *ClientAction) XXX_Size() int {
	return xxx_messageInfo_ClientAction.Size(m)
}
func (m *ClientAction) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientAction.DiscardUnknown(m)
}

var xxx_messageInfo_ClientAction proto.InternalMessageInfo

func (m *ClientAction) GetType() ClientAction_ClientActionType {
	if m != nil {
		return m.Type
	}
	return ClientAction_HIT
}

func (m *ClientAction) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type SubscribeRequest struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{2}
}

func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequest.Unmarshal(m, b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequest.Size(m)
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type ServerResponse struct {
	Type                 ServerResponse_ServerResponseType `protobuf:"varint,1,opt,name=type,proto3,enum=ServerResponse_ServerResponseType" json:"type,omitempty"`
	OptionalString       string                            `protobuf:"bytes,2,opt,name=optional_string,json=optionalString,proto3" json:"optional_string,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *ServerResponse) Reset()         { *m = ServerResponse{} }
func (m *ServerResponse) String() string { return proto.CompactTextString(m) }
func (*ServerResponse) ProtoMessage()    {}
func (*ServerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{3}
}

func (m *ServerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerResponse.Unmarshal(m, b)
}
func (m *ServerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerResponse.Marshal(b, m, deterministic)
}
func (m *ServerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerResponse.Merge(m, src)
}
func (m *ServerResponse) XXX_Size() int {
	return xxx_messageInfo_ServerResponse.Size(m)
}
func (m *ServerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServerResponse proto.InternalMessageInfo

func (m *ServerResponse) GetType() ServerResponse_ServerResponseType {
	if m != nil {
		return m.Type
	}
	return ServerResponse_MESSAGE
}

func (m *ServerResponse) GetOptionalString() string {
	if m != nil {
		return m.OptionalString
	}
	return ""
}

func init() {
	proto.RegisterEnum("ClientAction_ClientActionType", ClientAction_ClientActionType_name, ClientAction_ClientActionType_value)
	proto.RegisterEnum("ServerResponse_ServerResponseType", ServerResponse_ServerResponseType_name, ServerResponse_ServerResponseType_value)
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*ClientAction)(nil), "ClientAction")
	proto.RegisterType((*SubscribeRequest)(nil), "SubscribeRequest")
	proto.RegisterType((*ServerResponse)(nil), "ServerResponse")
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_77a6da22d6a3feb1) }

var fileDescriptor_77a6da22d6a3feb1 = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xdf, 0x4e, 0xc2, 0x30,
	0x14, 0x87, 0x57, 0x14, 0x70, 0x07, 0x81, 0xda, 0x2b, 0xc2, 0x85, 0x21, 0xbd, 0x91, 0xab, 0x45,
	0x47, 0xe2, 0xfd, 0x94, 0x46, 0x49, 0x94, 0x90, 0x75, 0x7a, 0x4b, 0xc6, 0x72, 0x34, 0xe3, 0xcf,
	0x56, 0xdb, 0x62, 0xc2, 0x63, 0xf8, 0x10, 0xbe, 0xa7, 0x01, 0x91, 0xb0, 0x79, 0xd7, 0xdf, 0x39,
	0x6d, 0xcf, 0xf9, 0xf2, 0x81, 0xab, 0x55, 0xe2, 0x29, 0x9d, 0xdb, 0x9c, 0xd7, 0xa1, 0x2a, 0x56,
	0xca, 0x6e, 0xf8, 0x17, 0x81, 0xf3, 0xfb, 0x65, 0x8a, 0x99, 0x0d, 0x12, 0x9b, 0xe6, 0x19, 0xf3,
	0xe1, 0xd4, 0x6e, 0x14, 0x76, 0x48, 0x8f, 0xf4, 0x5b, 0xfe, 0xa5, 0x77, 0xdc, 0x2c, 0x84, 0x68,
	0xa3, 0x30, 0xdc, 0xdd, 0x65, 0x5d, 0x38, 0x5b, 0x1b, 0xd4, 0x59, 0xbc, 0xc2, 0x4e, 0xa5, 0x47,
	0xfa, 0x6e, 0x78, 0xc8, 0xfc, 0x06, 0x68, 0xf9, 0x15, 0xab, 0xc3, 0xc9, 0xe3, 0x28, 0xa2, 0x0e,
	0x73, 0xa1, 0x2a, 0xa3, 0x60, 0x3c, 0xa4, 0x64, 0x7b, 0x7c, 0x12, 0xc1, 0xab, 0xa0, 0x15, 0xee,
	0x01, 0x95, 0xeb, 0x99, 0x49, 0x74, 0x3a, 0xc3, 0x10, 0x3f, 0xd6, 0x68, 0x6c, 0x61, 0x04, 0x29,
	0x8d, 0xf8, 0x26, 0xd0, 0x92, 0xa8, 0x3f, 0x51, 0x87, 0x68, 0x54, 0x9e, 0x19, 0x64, 0xb7, 0x05,
	0x0a, 0xee, 0x15, 0xdb, 0xa5, 0x78, 0x44, 0x72, 0x05, 0xed, 0x5c, 0x6d, 0xf7, 0x8c, 0x97, 0x53,
	0x63, 0x75, 0x9a, 0xbd, 0xef, 0x81, 0x5a, 0x7f, 0x65, 0xb9, 0xab, 0x72, 0x1f, 0xd8, 0xff, 0x4f,
	0x58, 0x03, 0xea, 0xcf, 0x42, 0xca, 0xe0, 0x41, 0x50, 0x87, 0xb5, 0xa1, 0x31, 0x16, 0x62, 0x28,
	0xa7, 0xa3, 0xf1, 0xe4, 0x25, 0xa2, 0xc4, 0x9f, 0x83, 0x7b, 0xb7, 0x8c, 0x93, 0xc5, 0x3c, 0x4e,
	0x16, 0x6c, 0x00, 0xee, 0x01, 0x92, 0x5d, 0x78, 0x65, 0xe0, 0x6e, 0xbb, 0xb4, 0x24, 0x77, 0xae,
	0x09, 0xeb, 0x43, 0x73, 0x82, 0xfa, 0x2d, 0xd7, 0xab, 0xbd, 0xad, 0x66, 0x41, 0x49, 0xb7, 0xe6,
	0xfd, 0x5a, 0x75, 0x66, 0xb5, 0x9d, 0xe7, 0xc1, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x5b,
	0xf0, 0xd6, 0xf4, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BlackjackClient is the client API for Blackjack service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlackjackClient interface {
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Blackjack_SubscribeClient, error)
	PerformAction(ctx context.Context, in *ClientAction, opts ...grpc.CallOption) (*Empty, error)
}

type blackjackClient struct {
	cc *grpc.ClientConn
}

func NewBlackjackClient(cc *grpc.ClientConn) BlackjackClient {
	return &blackjackClient{cc}
}

func (c *blackjackClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Blackjack_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Blackjack_serviceDesc.Streams[0], "/Blackjack/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &blackjackSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Blackjack_SubscribeClient interface {
	Recv() (*ServerResponse, error)
	grpc.ClientStream
}

type blackjackSubscribeClient struct {
	grpc.ClientStream
}

func (x *blackjackSubscribeClient) Recv() (*ServerResponse, error) {
	m := new(ServerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blackjackClient) PerformAction(ctx context.Context, in *ClientAction, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Blackjack/PerformAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlackjackServer is the server API for Blackjack service.
type BlackjackServer interface {
	Subscribe(*SubscribeRequest, Blackjack_SubscribeServer) error
	PerformAction(context.Context, *ClientAction) (*Empty, error)
}

// UnimplementedBlackjackServer can be embedded to have forward compatible implementations.
type UnimplementedBlackjackServer struct {
}

func (*UnimplementedBlackjackServer) Subscribe(req *SubscribeRequest, srv Blackjack_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedBlackjackServer) PerformAction(ctx context.Context, req *ClientAction) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformAction not implemented")
}

func RegisterBlackjackServer(s *grpc.Server, srv BlackjackServer) {
	s.RegisterService(&_Blackjack_serviceDesc, srv)
}

func _Blackjack_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlackjackServer).Subscribe(m, &blackjackSubscribeServer{stream})
}

type Blackjack_SubscribeServer interface {
	Send(*ServerResponse) error
	grpc.ServerStream
}

type blackjackSubscribeServer struct {
	grpc.ServerStream
}

func (x *blackjackSubscribeServer) Send(m *ServerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Blackjack_PerformAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackjackServer).PerformAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blackjack/PerformAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackjackServer).PerformAction(ctx, req.(*ClientAction))
	}
	return interceptor(ctx, in, info, handler)
}

var _Blackjack_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Blackjack",
	HandlerType: (*BlackjackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PerformAction",
			Handler:    _Blackjack_PerformAction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Blackjack_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}
